
Queue & Priority Queue

Queue is an abstract data structure, somewhat similar to Stack. In contrast to Queue, queue is
opened at both end. One end is always used to insert data (enqueue) and the other is used to
remove data (dequeue). Queue follows First-In-First-Out methodology, i.e., the data item stored
first will be accessed first.
Queue operations may involve initializing or defining the queue, utilizing it and then completing
erasing it from memory. Here we shall try to understand basic operations associated with
queues −
enqueue() − add (store) an item to the queue.
Algorithm for enqueue operation
procedure enqueue(data)
if queue is full
return overflow
endif
rear ← rear + 1
queue[rear] ← data
return true
end procedure
dequeue() − remove (access) an item from the queue.
Algorithm for dequeue operation −
procedure dequeue
if queue is empty
return underflow
end if
data = queue[front]
front ← front + 1
return true
end procedure
Few more functions are required to make above mentioned queue operation efficient. These are
−
peek() − get the element at front of the queue without removing it.
begin procedure peek
return queue[front]
end procedure
isfull() − checks if queue is full.
begin procedure isfull
if rear equals to MAXSIZE
return true
else
return false
endif
end procedure
isempty() − checks if queue is empty.
begin procedure isempty
if front is less than MIN OR front is greater than rear
return true
else
return false
endif
end procedure
In queue, we always dequeue (or access) data, pointed by front pointer and while enqueing (or
storing) data in queue we take help of rear pointer.
